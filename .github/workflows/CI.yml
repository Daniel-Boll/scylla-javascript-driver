name: CI
env:
  DEBUG: napi:*
  APP_NAME: scylladb
  # MACOSX_DEPLOYMENT_TARGET: "10.13"
  CARGO_INCREMENTAL: "1"
permissions:
  contents: write
  id-token: write
"on":
  push:
    branches:
      - main
    tags-ignore:
      - "**"
    paths-ignore:
      - "**/*.md"
      - LICENSE
      - "**/*.gitignore"
      - .editorconfig
      - docs/**
  workflow_dispatch:
  pull_request: null
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  check-version-in-commit:
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.check-commit.outputs.should_publish }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Check commit message for version
        id: check-commit
        run: |
          commit_msg=$(git log --format=%B -n 1)
          if [[ $commit_msg =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::set-output name=should_publish::true"
          else
            echo "::set-output name=should_publish::false"
          fi
  build:
    if: needs.check-version-in-commit.outputs.should_publish == 'true'
    needs:
      - check-version-in-commit
    strategy:
      fail-fast: false
      matrix:
        settings:
          #   target: x86_64-apple-darwin
          #   build: yarn build --target x86_64-apple-darwin
          # - host: windows-latest
          #   build: yarn build --target x86_64-pc-windows-msvc
          #   target: x86_64-pc-windows-msvc
          # - host: windows-latest
          #   build: yarn build --target i686-pc-windows-msvc
          #   target: i686-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: yarn build --target x86_64-unknown-linux-gnu --use-napi-cross
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            build: yarn build --target x86_64-unknown-linux-musl -x

          # NOTE: https://github.com/Daniel-Boll/scylla-javascript-driver/actions/runs/11087794843/job/30806888759 something went wrong, gotta fix that later
          # - host: macos-latest
          #   target: aarch64-apple-darwin
          #   build: yarn build --target aarch64-apple-darwin

          # - host: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu
          #   build: yarn build --target aarch64-unknown-linux-gnu --use-napi-cross
          # - host: ubuntu-latest
          #   target: armv7-unknown-linux-gnueabihf
          #   build: yarn build --target armv7-unknown-linux-gnueabihf --use-napi-cross
          # - host: ubuntu-latest
          #   target: aarch64-linux-android
          #   build: yarn build --target aarch64-linux-android
          # - host: ubuntu-latest
          #   target: armv7-linux-androideabi
          #   build: yarn build --target armv7-linux-androideabi
          # - host: ubuntu-latest
          #   target: aarch64-unknown-linux-musl
          #   build: yarn build --target aarch64-unknown-linux-musl -x
          # - host: windows-latest
          #   target: aarch64-pc-windows-msvc
          #   build: yarn build --target aarch64-pc-windows-msvc
          # - host: ubuntu-latest
          #   target: wasm32-wasip1-threads
          #   build: yarn build --target wasm32-wasip1-threads
    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    outputs:
      OPENSSL_DIR: ${{ steps.install_openssl.outputs.OPENSSL_DIR }}
      OPENSSL_STATIC: ${{ steps.install_openssl.outputs.OPENSSL_STATIC }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 20
          check-latest: true
          cache: yarn
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.napi-rs
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        with:
          version: 0.13.0
      - name: Install cargo-zigbuild
        uses: taiki-e/install-action@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tool: cargo-zigbuild
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Install dependencies
        run: yarn install
      - name: Setup node x86
        uses: actions/setup-node@v4
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 20
          check-latest: true
          cache: yarn
          architecture: x86
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: "--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build"
          run: |
            apt update
            apt install -y pkg-config libssl-dev
            ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  # test-macOS-windows-binding:
  #   name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
  #   if: needs.check-version-in-commit.outputs.should_publish == 'true'
  #   needs:
  #     - check-version-in-commit
  #     - build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       settings:
  #         - host: macos-latest
  #           target: x86_64-apple-darwin
  #         # - host: windows-latest
  #         #   target: x86_64-pc-windows-msvc
  #       node:
  #         - "14"
  #         - "16"
  #         - "18"
  #   runs-on: ${{ matrix.settings.host }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Setup node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ matrix.node }}
  #         check-latest: true
  #         cache: yarn
  #     - name: Install dependencies
  #       run: yarn install
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: bindings-${{ matrix.settings.target }}
  #         path: .
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - name: Test bindings
  #       run: yarn test
  # test-linux-x64-gnu-binding:
  #   name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
  #   if: needs.check-version-in-commit.outputs.should_publish == 'true'
  #   needs:
  #     - check-version-in-commit
  #     - build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node:
  #         - "14"
  #         - "16"
  #         - "18"
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Setup node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ matrix.node }}
  #         check-latest: true
  #         cache: yarn
  #     - name: Install dependencies
  #       run: yarn install
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: bindings-x86_64-unknown-linux-gnu
  #         path: .
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - name: Test bindings
  #       run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-slim yarn test
  # universal-macOS:
  #   name: Build universal macOS binary
  #   needs:
  #     - build
  #   runs-on: macos-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Setup node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18
  #         check-latest: true
  #         cache: yarn
  #     - name: Install dependencies
  #       run: yarn install
  #     # - name: Download macOS x64 artifact
  #     #   uses: actions/download-artifact@v3
  #     #   with:
  #     #     name: bindings-x86_64-apple-darwin
  #     #     path: artifacts
  #     - name: Download macOS arm64 artifact
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: bindings-aarch64-apple-darwin
  #         path: artifacts
  #     - name: Combine binaries
  #       run: yarn universal
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: bindings-universal-apple-darwin
  #         path: ${{ env.APP_NAME }}.*.node
  #         if-no-files-found: error
  publish:
    if: needs.check-version-in-commit.outputs.should_publish == 'true'
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - check-version-in-commit
      # - test-macOS-windows-binding
      # - test-linux-x64-gnu-binding
      - build
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          check-latest: true
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Move artifacts
        run: yarn artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Publish
        run: |
          npm config set provenance true
          if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
